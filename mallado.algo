//ctrader - Mallado
//----------------
using System;
using System.Linq;
using cAlgo.API;
using cAlgo.API.Indicators;
using cAlgo.API.Internals;
using cAlgo.Indicators;

namespace cAlgo.Robots
{
    [Robot(TimeZone = TimeZones.UTC, AccessRights = AccessRights.None)]
    public class Mallado : Robot
    {

        [Parameter("Initial Quantity (Lots)", Group = "Volume", DefaultValue = 0.01, MinValue = 0.01, Step = 0.01)]
        public double InitialQuantity { get; set; }

        [Parameter("Mesh Distance", Group = "Mesh configuration", DefaultValue = 0.01, MinValue = 1E-05, Step = 1E-05)]
        public double meshDistance { get; set; }

        [Parameter("Take Profit", Group = "Mesh configuration", DefaultValue = 200)]
        public int TakeProfit { get; set; }

        [Parameter("Buy", Group = "Sell/buy", DefaultValue = false)]
        public bool botGoLong { get; set; }

        [Parameter("Sell", Group = "Sell/buy", DefaultValue = false)]
        public bool botGoShort { get; set; }

        public bool okNexLong { get; set; }
        public bool okNexShort { get; set; }

        protected override void OnStart()
        {
            if (botGoLong)
            {
                ExecuteOrder(InitialQuantity, TradeType.Buy);
            }
            if (botGoShort)
            {
                ExecuteOrder(InitialQuantity, TradeType.Sell);
            }
        }

        protected override void OnTick()
        {
            okNexLong = true;
            okNexShort = true;

            foreach (Position myPosition in Positions)
            {
                if (myPosition.TradeType.Equals(TradeType.Buy) && myPosition.EntryPrice < (Symbol.Ask + meshDistance) && myPosition.EntryPrice > (Symbol.Ask - meshDistance))
                {
                    okNexLong = false;
                }
                if (myPosition.TradeType.Equals(TradeType.Sell) && myPosition.EntryPrice < (Symbol.Bid + meshDistance) && myPosition.EntryPrice > (Symbol.Bid - meshDistance))
                {
                    okNexShort = false;
                }
            }

            if (okNexLong && botGoLong)
            {
                ExecuteOrder(InitialQuantity, TradeType.Buy);
            }
            if (okNexShort && botGoShort)
            {
                ExecuteOrder(InitialQuantity, TradeType.Sell);
            }
        }


        private void ExecuteOrder(double quantity, TradeType tradeType)
        {
            var volumeInUnits = Symbol.QuantityToVolumeInUnits(quantity);
            var result = ExecuteMarketOrder(tradeType, SymbolName, volumeInUnits, "Mallado", 0, TakeProfit);

            if (result.Error == ErrorCode.NoMoney)
                Stop();
        }
    }
}
